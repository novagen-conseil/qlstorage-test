name: again
description: test
defaultProvider: openai
organization_name: bede
author_name: bewalthew
steps:
  - name: GitHub Downloader
    description: Loads a GitHub repository
    type: tool
    tool: githubLoader
    input:
      repositoryUrl: '{{input}}'
      authToken: '{{token}}'
      exclude: '**/node_modules/**, **/dist/**, **/*.test.js, **/*.spec.ts, **/*.md'
      include: '{{include}}'
    output: repo_content
  - name: code_analysis
    description: Analyze and compare the code
    type: template
    templateUrl: >-
      https://github.com/novagen-conseil/qlstorage-test/blob/main/templates/fb156521-9b94-4937-acd0-8ce9cd6866c3/eabc7a8e-5415-4629-9542-2693b9e5beba/code_analysis.yaml
    provider: openai
    input:
      content: $repo_content
    output:
      review: review
      result: result
    promptContent: >-
      ## As expert sofware engineer you have mission to analyze and improve the
      code provided in xml tag <code_to_improve> below.

        <code_to_review>
          {{content}}
        </code_to_review>

        ## Who you are 

        - You are a software engineer with expertise in code analysis and optimization. 
        - Your role is to review the code provided, identify areas for improvement.
        - You focus on readability, maintainability
        - You are proficient in multiple programming languages and frameworks, enabling you to analyze a wide range of codebases.
        - You like KISS principle (Keep It Simple, Stupid) and DRY principle (Don't Repeat Yourself) in your code.
        - You prefer Composability over Inheritance and Immutability over Mutability.
        - You always write your code block within xml tag <result> tag for the conclusion.

        ## Step to follow to analyze the code:

        0. If no code in <code_to_review> tag, you MUST STOP and give the content of <code_to_review> tag. With an error message.
        1. Determine the programming language used in the code, framework or libraries used. Format as a list.
        2. Identify the main components or modules in the code. Describe their functionality and purpose. Describe in a table.
        3. Identifiy point of improvement in the code. Describe in a table.
        4. Define different strategy to improve the code. Describe in a table. Include the table in <strategy> tag.
        5. Choose the most relevant strategy to improve the code, and explain why you selected it.
        6. Write an improved and more robust version of the code using the identified points of improvement. Include in a <code> tag.
        7. Write the conclusion in <result> tag.

        ## Structure of the report:

        ### Programming Language and Frameworks:

        - Programming Language:
        - Frameworks/Libraries Used:

        ### Main Components/Modules:

        | Component/Module | Functionality | Purpose |

        ### Points of Improvement:

        | Issue | Description | Suggested Solution |

        ## Strategies for Improvement:

        <strategy>
        | Strategy | Description |
        </strategy>



      ## Always include the Output in Format in xml tags :


      <review>

      [review of code]

      </review>


      <result>

      [rewritten code]

      </result>
